Magesh Kuppan

Schedule :
    Commence    : 09:30 Hrs
    Tea Break   : 11:00 Hrs (20 mins)
    Lunch Break : 13:00 Hrs (1 Hr)
    Tea Break   : 15:30 Hrs (20 mins)
    Wind up     : 17:30 Hrs

Methodology:
    No powerpoints
    100% hands on driven
    Not targetted for information sharing
    Guided practice
    Minimum 50% of the participants should have completed the assignment

About You
    Name
    Total Experience
    Core Expertise / Primary skillset
    Experience in Go (if any)


Why Go?
    1. Easy Concurrency
    2. Easy Unit Testing
    3. Compiled

    1. Simplicity
        25 keywords
        - No access modifiers
        - No exceptions (ONLY Errors)
        - No classes (ONLY structs & functions)
        - No inheritance (ONLY composition)

    2. Ease of Concurrency
        - Built for concurrency
            Builtin Scheduler
            1000s of goroutines can be scheduled in 1 OS thread
            Language features
                go, chan, <- (channel operator), select, range

            OS Thread (8 MB)
            Goroutine (4 KB)

    3. Tooling support
        compiler
            1 executable
                Go scheduler + Garbage Collector
        package management
        

Barry Schwartz
    "Paradox of Choice" - TED Talk


Tools
    1. Visual Studio Code (http://code.visualstudio.com/)
    2. Go tools (http://www.golang.org)

To run a go program
    go run <filename>

To create a build
    go build <filename>
    go build -o hw hello-world.go 


Data Types in Go
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64(real float32 + imaginary float32)
    complex128(real float64 + imaginary float64)

    byte(alias for uint8)
    rune(alias for int32) (represents Unicode code point (unicode character))

Programming constructs
    if
    switch
    for

functions
    1. variadic functions
    2. Higher order functions
        a. functions can be assigned to variables
        b. functions can be passed as arguments to other functions
        c. functions can be returned by other functions
    3. Closures
    4. deferred functions

panic and recover
    panic
        the application cannot proceed further
    recover
        - used to handle errors

complex types
    1. Array
        A fixed size collection of values of the same type
    2. Slice
        A dynamically sized collection of values of the same type
        A pointer to an array
    3. Map
        A typed collection of key-value pairs
        

Pointer
    Pointer arithmetic is not supported

Modularity
    Modules ( >= go 1.13)
    Packages


$GOPATH
    bin
    pkg
    src
        github.com
            tkmagesh
                app1
                    pk1
                        .go
                    pk2
                        .go

go.mod
    go runtime version
    name of the module
    list of dependencies (references)
        by default, the code of the dependencies is maintained in the $GOPATH/pkg folder
        to localize the code of the dependencies, use the "vendor" folder
            go mod vendor

to create a module
    go mod init <module-name>

to install a third party package
    go get <package-name>
    go get github.com/fatih/color

To update a third party package
    go get -u <package-name>


interfaces
    implement "Sort" api for the Products
        Sort by id / name / cost / units / category
        IMPORTANT : use sort.Sort()


Goroutines

    To detect race conditions
        go run --race <file.go>

    Dont Communicate by sharing memory, instead share memory for communication

    Unbuffered channel
        A write operation can succeed ONLY if a read operation on the channel is already initiated

    Buffered channel
        Data can be written into the channel even when a read operation is not yet initiated.
        The number of data that can be written into the channel is limited by the capacity of the channel.

io
    io package
        base interfaces
            Reader
            Writer
            Closer
            Seeker
    ioutil
        read file
        write file
    bufio
        buffered reading and writing
    os
        file operations
            create, deleting etc


GRPC

    Interprocess communication
        .NET Remoting
        RMI (java)

    CORBA
        Common Object Request Broker Architecture

    Web
        IP
        TCP
        HTTP
        XML

        Web Service
        SOAP (Simple Object Access Protocal)
        WSDL (Web Service Description Language)

        Data as Resource (REST)
            URL -> What?
            HTTP Verb -> How?
            HTTP Status Code

        Data is represented in Text
        HTTP is stateless

    gRPC
        HTTP2
            binary serialization
            stateful connections

            communication patterns supported
                Request & Response
                Client Streaming (stream of requests and 1 response)
                Server Streaming (1 request and stream of responses)
                Bi-directional Streaming (stream of requests and responses)

        protocol buffers

P101,Pen,10,100,Stationary
P102,Pencil,5,50,Stationary

actual payload : 54
payload in XML : 246
payload in JSON : 174

Tools
    For mac
        brew install protobuf
        brew install protoc-gen-go
        brew install protoc-gen-go-grpc

    For windows
        Download https://github.com/protocolbuffers/protobuf/releases/download/v3.18.0/protoc-3.18.0-win64.zip
        Extract it in a folder
        Add the folder the PATH environment variable

    to test the installation
        protoc --version
        
    to generate the proxy and the stub
        protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto